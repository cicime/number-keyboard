(function () {
'use strict';

var keyboard = function (numInput) {
  var _this = this,
      _tip = this.html(),
      _input = $(numInput)[0],
      touch = 'touchend click';

  var dep = function dep(e) {
    e.preventDefault();
    e.stopPropagation();
  };

  var _init = function _init(e) {
    dep(e);
    createFlash(_input.value);
    $('.keyboard-hk').show();
    $('.keyboard-txt-hod').hide();
  };

  var add = function add(e) {
    dep(e);
    _input.value += e.data.txt;
    !/^\d+\.?\d{0,2}$/.test(_input.value) && minus(e);
    createFlash(_input.value);
  };

  var minus = function minus(e) {
    dep(e);
    _input.value && (_input.value = _input.value.replace(/.$/, ''));
    createFlash(_input.value);
  };

  var createFlash = function createFlash(val) {
    $('.keyboard-txt-hk').html(val || '');
    !$('.keyboard-flash').length && _this.append('<span class="keyboard-flash">|</span>');
    _this.trigger('kb.tap', val);
  };

  var removeFlash = function removeFlash() {
    return $('.keyboard-flash').remove();
  };

  var dom = function dom() {
    var key = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, '.', 'back']],
        html = $('<div class="keyboard keyboard-hk" hidden></div>'),
        table = $('<table class="keyboard-table"></table>');

    for (var i = 0; i < key.length; i++) {
      var row = $('<tr></tr>');
      for (var j = 0; j < key[i].length; j++) {
        var txt = key[i][j],
            td = $('<td class="keyboard-key">' + txt + '</td>');
        txt === 'back' ? td.on(touch, minus) : td.on(touch, { txt: txt }, add);
        row.append(td);
      }
      table.append(row);
    }
    html.append(table);
    $('body').append(html);

    _this.html('');
    _this.append('<span class="keyboard-txt-hk"></span>');
    _this.append('<span class="keyboard-txt-hod">' + _tip + '</span>');
  };

  dom();

  _this.on(touch, _init);
  $(document).on(touch, function () {
    removeFlash();
    $('.keyboard-hk').hide();
    !_input.value && $('.keyboard-txt-hod').show();
  });

  return this;
};

$(function () {
  $.fn.extend({ keyboard: keyboard });

  {
    console.log('[' + "development" + '] satarted!');
  }
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9rZXlib2FyZC5wbHVzLmpzIiwiLi4vc3JjL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAobnVtSW5wdXQpIHtcclxuICBjb25zdFxyXG4gICAgICBfdGhpcyA9IHRoaXMsXHJcbiAgICAgIF90aXAgPSB0aGlzLmh0bWwoKSxcclxuICAgICAgX2lucHV0ID0gJChudW1JbnB1dClbMF0sXHJcbiAgICAgIHRvdWNoID0gJ3RvdWNoZW5kIGNsaWNrJ1xyXG5cclxuICBjb25zdCBkZXAgPSAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXHJcbiAgfVxyXG5cclxuICBjb25zdCBfaW5pdCA9IChlKSA9PiB7XHJcbiAgICBkZXAoZSlcclxuICAgIGNyZWF0ZUZsYXNoKF9pbnB1dC52YWx1ZSlcclxuICAgICQoJy5rZXlib2FyZC1oaycpLnNob3coKVxyXG4gICAgJCgnLmtleWJvYXJkLXR4dC1ob2QnKS5oaWRlKClcclxuICB9XHJcblxyXG4gIGNvbnN0IGFkZCA9IChlKSA9PiB7XHJcbiAgICBkZXAoZSlcclxuICAgIF9pbnB1dC52YWx1ZSArPSBlLmRhdGEudHh0XHJcbiAgICAhL15cXGQrXFwuP1xcZHswLDJ9JC8udGVzdChfaW5wdXQudmFsdWUpICYmIG1pbnVzKGUpXHJcbiAgICBjcmVhdGVGbGFzaChfaW5wdXQudmFsdWUpXHJcbiAgfVxyXG5cclxuICBjb25zdCBtaW51cyA9IChlKSA9PiB7XHJcbiAgICBkZXAoZSlcclxuICAgIF9pbnB1dC52YWx1ZSAmJiAoX2lucHV0LnZhbHVlID0gX2lucHV0LnZhbHVlLnJlcGxhY2UoLy4kLywgJycpKVxyXG4gICAgY3JlYXRlRmxhc2goX2lucHV0LnZhbHVlKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgY3JlYXRlRmxhc2ggPSAodmFsKSA9PiB7XHJcbiAgICAkKCcua2V5Ym9hcmQtdHh0LWhrJykuaHRtbCh2YWwgfHwgJycpXHJcbiAgICAhJCgnLmtleWJvYXJkLWZsYXNoJykubGVuZ3RoICYmIF90aGlzLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJrZXlib2FyZC1mbGFzaFwiPnw8L3NwYW4+JylcclxuICAgIF90aGlzLnRyaWdnZXIoJ2tiLnRhcCcsIHZhbClcclxuICB9XHJcblxyXG4gIGNvbnN0IHJlbW92ZUZsYXNoID0gKCkgPT4gJCgnLmtleWJvYXJkLWZsYXNoJykucmVtb3ZlKCk7XHJcblxyXG4gIGNvbnN0IGRvbSA9ICgpID0+IHtcclxuICAgIGNvbnN0XHJcbiAgICAgICAga2V5ID0gW1xyXG4gICAgICAgICAgWzEsIDIsIDNdLFxyXG4gICAgICAgICAgWzQsIDUsIDZdLFxyXG4gICAgICAgICAgWzcsIDgsIDldLFxyXG4gICAgICAgICAgWzAsICcuJywgJ2JhY2snXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgaHRtbCA9ICQoJzxkaXYgY2xhc3M9XCJrZXlib2FyZCBrZXlib2FyZC1oa1wiIGhpZGRlbj48L2Rpdj4nKSxcclxuICAgICAgICB0YWJsZSA9ICQoJzx0YWJsZSBjbGFzcz1cImtleWJvYXJkLXRhYmxlXCI+PC90YWJsZT4nKVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGxldCByb3cgPSAkKCc8dHI+PC90cj4nKVxyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGtleVtpXS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIGxldCB0eHQgPSBrZXlbaV1bal0sXHJcbiAgICAgICAgICAgIHRkID0gJCgnPHRkIGNsYXNzPVwia2V5Ym9hcmQta2V5XCI+JyArIHR4dCArICc8L3RkPicpXHJcbiAgICAgICAgdHh0ID09PSAnYmFjaycgPyB0ZC5vbih0b3VjaCwgbWludXMpIDogdGQub24odG91Y2gsIHt0eHR9LCBhZGQpXHJcbiAgICAgICAgcm93LmFwcGVuZCh0ZClcclxuICAgICAgfVxyXG4gICAgICB0YWJsZS5hcHBlbmQocm93KVxyXG4gICAgfVxyXG4gICAgaHRtbC5hcHBlbmQodGFibGUpXHJcbiAgICAkKCdib2R5JykuYXBwZW5kKGh0bWwpXHJcblxyXG4gICAgX3RoaXMuaHRtbCgnJylcclxuICAgIF90aGlzLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJrZXlib2FyZC10eHQtaGtcIj48L3NwYW4+JylcclxuICAgIF90aGlzLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJrZXlib2FyZC10eHQtaG9kXCI+JyArIF90aXAgKyAnPC9zcGFuPicpXHJcbiAgfVxyXG5cclxuICBkb20oKTtcclxuXHJcbiAgX3RoaXMub24odG91Y2gsIF9pbml0KVxyXG4gICQoZG9jdW1lbnQpLm9uKHRvdWNoLCAoKSA9PiB7XHJcbiAgICByZW1vdmVGbGFzaCgpXHJcbiAgICAkKCcua2V5Ym9hcmQtaGsnKS5oaWRlKClcclxuICAgICFfaW5wdXQudmFsdWUgJiYgJCgnLmtleWJvYXJkLXR4dC1ob2QnKS5zaG93KClcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07IiwiaW1wb3J0IGtleWJvYXJkIGZyb20gJy4va2V5Ym9hcmQucGx1cydcclxuXHJcbiQoZnVuY3Rpb24gKCkge1xyXG4gICQuZm4uZXh0ZW5kKHsga2V5Ym9hcmQgfSlcclxuICBcclxuICBpZiAoRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICBjb25zb2xlLmxvZyhgWyR7RU5WfV0gc2F0YXJ0ZWQhYClcclxuICB9XHJcbn0pIl0sIm5hbWVzIjpbIm51bUlucHV0IiwiX3RoaXMiLCJfdGlwIiwiaHRtbCIsIl9pbnB1dCIsIiQiLCJ0b3VjaCIsImRlcCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIl9pbml0IiwidmFsdWUiLCJzaG93IiwiaGlkZSIsImFkZCIsImRhdGEiLCJ0eHQiLCJ0ZXN0IiwibWludXMiLCJyZXBsYWNlIiwiY3JlYXRlRmxhc2giLCJ2YWwiLCJsZW5ndGgiLCJhcHBlbmQiLCJ0cmlnZ2VyIiwicmVtb3ZlRmxhc2giLCJyZW1vdmUiLCJkb20iLCJrZXkiLCJ0YWJsZSIsImkiLCJyb3ciLCJqIiwidGQiLCJvbiIsImRvY3VtZW50IiwiZm4iLCJleHRlbmQiLCJrZXlib2FyZCIsIkVOViIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsZUFBZSxVQUFVQSxRQUFWLEVBQW9CO01BRTdCQyxRQUFRLElBRFo7TUFFSUMsT0FBTyxLQUFLQyxJQUFMLEVBRlg7TUFHSUMsU0FBU0MsRUFBRUwsUUFBRixFQUFZLENBQVosQ0FIYjtNQUlJTSxRQUFRLGdCQUpaOztNQU1NQyxNQUFNLFNBQU5BLEdBQU0sQ0FBQ0MsQ0FBRCxFQUFPO01BQ2ZDLGNBQUY7TUFDRUMsZUFBRjtHQUZGOztNQUtNQyxRQUFRLFNBQVJBLEtBQVEsQ0FBQ0gsQ0FBRCxFQUFPO1FBQ2ZBLENBQUo7Z0JBQ1lKLE9BQU9RLEtBQW5CO01BQ0UsY0FBRixFQUFrQkMsSUFBbEI7TUFDRSxtQkFBRixFQUF1QkMsSUFBdkI7R0FKRjs7TUFPTUMsTUFBTSxTQUFOQSxHQUFNLENBQUNQLENBQUQsRUFBTztRQUNiQSxDQUFKO1dBQ09JLEtBQVAsSUFBZ0JKLEVBQUVRLElBQUYsQ0FBT0MsR0FBdkI7S0FDQyxrQkFBa0JDLElBQWxCLENBQXVCZCxPQUFPUSxLQUE5QixDQUFELElBQXlDTyxNQUFNWCxDQUFOLENBQXpDO2dCQUNZSixPQUFPUSxLQUFuQjtHQUpGOztNQU9NTyxRQUFRLFNBQVJBLEtBQVEsQ0FBQ1gsQ0FBRCxFQUFPO1FBQ2ZBLENBQUo7V0FDT0ksS0FBUCxLQUFpQlIsT0FBT1EsS0FBUCxHQUFlUixPQUFPUSxLQUFQLENBQWFRLE9BQWIsQ0FBcUIsSUFBckIsRUFBMkIsRUFBM0IsQ0FBaEM7Z0JBQ1loQixPQUFPUSxLQUFuQjtHQUhGOztNQU1NUyxjQUFjLFNBQWRBLFdBQWMsQ0FBQ0MsR0FBRCxFQUFTO01BQ3pCLGtCQUFGLEVBQXNCbkIsSUFBdEIsQ0FBMkJtQixPQUFPLEVBQWxDO0tBQ0NqQixFQUFFLGlCQUFGLEVBQXFCa0IsTUFBdEIsSUFBZ0N0QixNQUFNdUIsTUFBTixDQUFhLHVDQUFiLENBQWhDO1VBQ01DLE9BQU4sQ0FBYyxRQUFkLEVBQXdCSCxHQUF4QjtHQUhGOztNQU1NSSxjQUFjLFNBQWRBLFdBQWM7V0FBTXJCLEVBQUUsaUJBQUYsRUFBcUJzQixNQUFyQixFQUFOO0dBQXBCOztNQUVNQyxNQUFNLFNBQU5BLEdBQU0sR0FBTTtRQUVaQyxNQUFNLENBQ0osQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FESSxFQUVKLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBRkksRUFHSixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUhJLEVBSUosQ0FBQyxDQUFELEVBQUksR0FBSixFQUFTLE1BQVQsQ0FKSSxDQURWO1FBT0kxQixPQUFPRSxFQUFFLGlEQUFGLENBUFg7UUFRSXlCLFFBQVF6QixFQUFFLHdDQUFGLENBUlo7O1NBVUssSUFBSTBCLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsSUFBSU4sTUFBeEIsRUFBZ0NRLEdBQWhDLEVBQXFDO1VBQy9CQyxNQUFNM0IsRUFBRSxXQUFGLENBQVY7V0FDSyxJQUFJNEIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSixJQUFJRSxDQUFKLEVBQU9SLE1BQTNCLEVBQW1DVSxHQUFuQyxFQUF3QztZQUNsQ2hCLE1BQU1ZLElBQUlFLENBQUosRUFBT0UsQ0FBUCxDQUFWO1lBQ0lDLEtBQUs3QixFQUFFLDhCQUE4QlksR0FBOUIsR0FBb0MsT0FBdEMsQ0FEVDtnQkFFUSxNQUFSLEdBQWlCaUIsR0FBR0MsRUFBSCxDQUFNN0IsS0FBTixFQUFhYSxLQUFiLENBQWpCLEdBQXVDZSxHQUFHQyxFQUFILENBQU03QixLQUFOLEVBQWEsRUFBQ1csUUFBRCxFQUFiLEVBQW9CRixHQUFwQixDQUF2QztZQUNJUyxNQUFKLENBQVdVLEVBQVg7O1lBRUlWLE1BQU4sQ0FBYVEsR0FBYjs7U0FFR1IsTUFBTCxDQUFZTSxLQUFaO01BQ0UsTUFBRixFQUFVTixNQUFWLENBQWlCckIsSUFBakI7O1VBRU1BLElBQU4sQ0FBVyxFQUFYO1VBQ01xQixNQUFOLENBQWEsdUNBQWI7VUFDTUEsTUFBTixDQUFhLG9DQUFvQ3RCLElBQXBDLEdBQTJDLFNBQXhEO0dBMUJGOzs7O1FBK0JNaUMsRUFBTixDQUFTN0IsS0FBVCxFQUFnQkssS0FBaEI7SUFDRXlCLFFBQUYsRUFBWUQsRUFBWixDQUFlN0IsS0FBZixFQUFzQixZQUFNOztNQUV4QixjQUFGLEVBQWtCUSxJQUFsQjtLQUNDVixPQUFPUSxLQUFSLElBQWlCUCxFQUFFLG1CQUFGLEVBQXVCUSxJQUF2QixFQUFqQjtHQUhGOztTQU1PLElBQVA7OztBQzdFRlIsRUFBRSxZQUFZO0lBQ1ZnQyxFQUFGLENBQUtDLE1BQUwsQ0FBWSxFQUFFQyxrQkFBRixFQUFaOztFQUVJQyxBQUFKLEFBQTJCO1lBQ2pCQyxHQUFSLE9BQWdCRCxhQUFoQjs7Q0FKSjs7In0=
