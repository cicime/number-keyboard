(function () {
'use strict';

var keyboard = function (numInput) {
  var _this = this,
      _tip = this.html(),
      _input = $(numInput)[0],
      touch = 'touchend click';

  var dep = function dep(e) {
    e.preventDefault();
    e.stopPropagation();
  };

  var _init = function _init(e) {
    dep(e);
    createFlash(_input.value);
    $('.keyboard-hk').show();
    $('.keyboard-txt-hod').hide();
  };

  var add = function add(e) {
    dep(e);
    _input.value += e.data.txt;
    !/^\d+\.?\d{0,2}$/.test(_input.value) && minus(e);
    createFlash(_input.value);
  };

  var minus = function minus(e) {
    dep(e);
    _input.value && (_input.value = _input.value.replace(/.$/, ''));
    createFlash(_input.value);
  };

  var createFlash = function createFlash(val) {
    $('.keyboard-txt-hk').html(val || '');
    !$('.keyboard-flash').length && _this.append('<span class="keyboard-flash">|</span>');
    _this.trigger('kb.tap', val);
  };

  var removeFlash = function removeFlash() {
    return $('.keyboard-flash').remove();
  };

  var dom = function dom() {
    var key = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, '.', 'back']],
        html = $('<div class="keyboard keyboard-hk" hidden></div>'),
        table = $('<table class="keyboard-table"></table>');

    for (var i = 0; i < key.length; i++) {
      var row = $('<tr></tr>');
      for (var j = 0; j < key[i].length; j++) {
        var txt = key[i][j],
            td = $('<td class="keyboard-key">' + txt + '</td>');
        txt === 'back' ? td.on(touch, minus) : td.on(touch, { txt: txt }, add);
        row.append(td);
      }
      table.append(row);
    }
    html.append(table);
    $('body').append(html);

    _this.html('');
    _this.append('<span class="keyboard-txt-hk"></span>');
    _this.append('<span class="keyboard-txt-hod">' + _tip + '</span>');
  };

  dom();

  _this.on(touch, _init);
  $(document).on(touch, function () {
    removeFlash();
    $('.keyboard-hk').hide();
    !_input.value && $('.keyboard-txt-hod').show();
  });

  return this;
};

$(function () {
  $.fn.extend({ keyboard: keyboard });

  {
    console.log('[' + "development" + '] satarted!');
  }
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9rZXlib2FyZC5qcyIsIi4uL3NyYy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKG51bUlucHV0KSB7XHJcbiAgY29uc3RcclxuICAgICAgX3RoaXMgPSB0aGlzLFxyXG4gICAgICBfdGlwID0gdGhpcy5odG1sKCksXHJcbiAgICAgIF9pbnB1dCA9ICQobnVtSW5wdXQpWzBdLFxyXG4gICAgICB0b3VjaCA9ICd0b3VjaGVuZCBjbGljaydcclxuXHJcbiAgY29uc3QgZGVwID0gKGUpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgX2luaXQgPSAoZSkgPT4ge1xyXG4gICAgZGVwKGUpXHJcbiAgICBjcmVhdGVGbGFzaChfaW5wdXQudmFsdWUpXHJcbiAgICAkKCcua2V5Ym9hcmQtaGsnKS5zaG93KClcclxuICAgICQoJy5rZXlib2FyZC10eHQtaG9kJykuaGlkZSgpXHJcbiAgfVxyXG5cclxuICBjb25zdCBhZGQgPSAoZSkgPT4ge1xyXG4gICAgZGVwKGUpXHJcbiAgICBfaW5wdXQudmFsdWUgKz0gZS5kYXRhLnR4dFxyXG4gICAgIS9eXFxkK1xcLj9cXGR7MCwyfSQvLnRlc3QoX2lucHV0LnZhbHVlKSAmJiBtaW51cyhlKVxyXG4gICAgY3JlYXRlRmxhc2goX2lucHV0LnZhbHVlKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgbWludXMgPSAoZSkgPT4ge1xyXG4gICAgZGVwKGUpXHJcbiAgICBfaW5wdXQudmFsdWUgJiYgKF9pbnB1dC52YWx1ZSA9IF9pbnB1dC52YWx1ZS5yZXBsYWNlKC8uJC8sICcnKSlcclxuICAgIGNyZWF0ZUZsYXNoKF9pbnB1dC52YWx1ZSlcclxuICB9XHJcblxyXG4gIGNvbnN0IGNyZWF0ZUZsYXNoID0gKHZhbCkgPT4ge1xyXG4gICAgJCgnLmtleWJvYXJkLXR4dC1oaycpLmh0bWwodmFsIHx8ICcnKVxyXG4gICAgISQoJy5rZXlib2FyZC1mbGFzaCcpLmxlbmd0aCAmJiBfdGhpcy5hcHBlbmQoJzxzcGFuIGNsYXNzPVwia2V5Ym9hcmQtZmxhc2hcIj58PC9zcGFuPicpXHJcbiAgICBfdGhpcy50cmlnZ2VyKCdrYi50YXAnLCB2YWwpXHJcbiAgfVxyXG5cclxuICBjb25zdCByZW1vdmVGbGFzaCA9ICgpID0+ICQoJy5rZXlib2FyZC1mbGFzaCcpLnJlbW92ZSgpO1xyXG5cclxuICBjb25zdCBkb20gPSAoKSA9PiB7XHJcbiAgICBjb25zdFxyXG4gICAgICAgIGtleSA9IFtcclxuICAgICAgICAgIFsxLCAyLCAzXSxcclxuICAgICAgICAgIFs0LCA1LCA2XSxcclxuICAgICAgICAgIFs3LCA4LCA5XSxcclxuICAgICAgICAgIFswLCAnLicsICdiYWNrJ11cclxuICAgICAgICBdLFxyXG4gICAgICAgIGh0bWwgPSAkKCc8ZGl2IGNsYXNzPVwia2V5Ym9hcmQga2V5Ym9hcmQtaGtcIiBoaWRkZW4+PC9kaXY+JyksXHJcbiAgICAgICAgdGFibGUgPSAkKCc8dGFibGUgY2xhc3M9XCJrZXlib2FyZC10YWJsZVwiPjwvdGFibGU+JylcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgcm93ID0gJCgnPHRyPjwvdHI+JylcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBrZXlbaV0ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICBsZXQgdHh0ID0ga2V5W2ldW2pdLFxyXG4gICAgICAgICAgICB0ZCA9ICQoJzx0ZCBjbGFzcz1cImtleWJvYXJkLWtleVwiPicgKyB0eHQgKyAnPC90ZD4nKVxyXG4gICAgICAgIHR4dCA9PT0gJ2JhY2snID8gdGQub24odG91Y2gsIG1pbnVzKSA6IHRkLm9uKHRvdWNoLCB7dHh0fSwgYWRkKVxyXG4gICAgICAgIHJvdy5hcHBlbmQodGQpXHJcbiAgICAgIH1cclxuICAgICAgdGFibGUuYXBwZW5kKHJvdylcclxuICAgIH1cclxuICAgIGh0bWwuYXBwZW5kKHRhYmxlKVxyXG4gICAgJCgnYm9keScpLmFwcGVuZChodG1sKVxyXG5cclxuICAgIF90aGlzLmh0bWwoJycpXHJcbiAgICBfdGhpcy5hcHBlbmQoJzxzcGFuIGNsYXNzPVwia2V5Ym9hcmQtdHh0LWhrXCI+PC9zcGFuPicpXHJcbiAgICBfdGhpcy5hcHBlbmQoJzxzcGFuIGNsYXNzPVwia2V5Ym9hcmQtdHh0LWhvZFwiPicgKyBfdGlwICsgJzwvc3Bhbj4nKVxyXG4gIH1cclxuXHJcbiAgZG9tKCk7XHJcblxyXG4gIF90aGlzLm9uKHRvdWNoLCBfaW5pdClcclxuICAkKGRvY3VtZW50KS5vbih0b3VjaCwgKCkgPT4ge1xyXG4gICAgcmVtb3ZlRmxhc2goKVxyXG4gICAgJCgnLmtleWJvYXJkLWhrJykuaGlkZSgpXHJcbiAgICAhX2lucHV0LnZhbHVlICYmICQoJy5rZXlib2FyZC10eHQtaG9kJykuc2hvdygpXHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59OyIsImltcG9ydCBrZXlib2FyZCBmcm9tICcuL2tleWJvYXJkJ1xyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcbiAgJC5mbi5leHRlbmQoeyBrZXlib2FyZCB9KVxyXG4gIFxyXG4gIGlmIChFTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAgIGNvbnNvbGUubG9nKGBbJHtFTlZ9XSBzYXRhcnRlZCFgKVxyXG4gIH1cclxufSkiXSwibmFtZXMiOlsibnVtSW5wdXQiLCJfdGhpcyIsIl90aXAiLCJodG1sIiwiX2lucHV0IiwiJCIsInRvdWNoIiwiZGVwIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiX2luaXQiLCJ2YWx1ZSIsInNob3ciLCJoaWRlIiwiYWRkIiwiZGF0YSIsInR4dCIsInRlc3QiLCJtaW51cyIsInJlcGxhY2UiLCJjcmVhdGVGbGFzaCIsInZhbCIsImxlbmd0aCIsImFwcGVuZCIsInRyaWdnZXIiLCJyZW1vdmVGbGFzaCIsInJlbW92ZSIsImRvbSIsImtleSIsInRhYmxlIiwiaSIsInJvdyIsImoiLCJ0ZCIsIm9uIiwiZG9jdW1lbnQiLCJmbiIsImV4dGVuZCIsImtleWJvYXJkIiwiRU5WIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7QUFDQSxlQUFlLFVBQVVBLFFBQVYsRUFBb0I7TUFFN0JDLFFBQVEsSUFEWjtNQUVJQyxPQUFPLEtBQUtDLElBQUwsRUFGWDtNQUdJQyxTQUFTQyxFQUFFTCxRQUFGLEVBQVksQ0FBWixDQUhiO01BSUlNLFFBQVEsZ0JBSlo7O01BTU1DLE1BQU0sU0FBTkEsR0FBTSxDQUFDQyxDQUFELEVBQU87TUFDZkMsY0FBRjtNQUNFQyxlQUFGO0dBRkY7O01BS01DLFFBQVEsU0FBUkEsS0FBUSxDQUFDSCxDQUFELEVBQU87UUFDZkEsQ0FBSjtnQkFDWUosT0FBT1EsS0FBbkI7TUFDRSxjQUFGLEVBQWtCQyxJQUFsQjtNQUNFLG1CQUFGLEVBQXVCQyxJQUF2QjtHQUpGOztNQU9NQyxNQUFNLFNBQU5BLEdBQU0sQ0FBQ1AsQ0FBRCxFQUFPO1FBQ2JBLENBQUo7V0FDT0ksS0FBUCxJQUFnQkosRUFBRVEsSUFBRixDQUFPQyxHQUF2QjtLQUNDLGtCQUFrQkMsSUFBbEIsQ0FBdUJkLE9BQU9RLEtBQTlCLENBQUQsSUFBeUNPLE1BQU1YLENBQU4sQ0FBekM7Z0JBQ1lKLE9BQU9RLEtBQW5CO0dBSkY7O01BT01PLFFBQVEsU0FBUkEsS0FBUSxDQUFDWCxDQUFELEVBQU87UUFDZkEsQ0FBSjtXQUNPSSxLQUFQLEtBQWlCUixPQUFPUSxLQUFQLEdBQWVSLE9BQU9RLEtBQVAsQ0FBYVEsT0FBYixDQUFxQixJQUFyQixFQUEyQixFQUEzQixDQUFoQztnQkFDWWhCLE9BQU9RLEtBQW5CO0dBSEY7O01BTU1TLGNBQWMsU0FBZEEsV0FBYyxDQUFDQyxHQUFELEVBQVM7TUFDekIsa0JBQUYsRUFBc0JuQixJQUF0QixDQUEyQm1CLE9BQU8sRUFBbEM7S0FDQ2pCLEVBQUUsaUJBQUYsRUFBcUJrQixNQUF0QixJQUFnQ3RCLE1BQU11QixNQUFOLENBQWEsdUNBQWIsQ0FBaEM7VUFDTUMsT0FBTixDQUFjLFFBQWQsRUFBd0JILEdBQXhCO0dBSEY7O01BTU1JLGNBQWMsU0FBZEEsV0FBYztXQUFNckIsRUFBRSxpQkFBRixFQUFxQnNCLE1BQXJCLEVBQU47R0FBcEI7O01BRU1DLE1BQU0sU0FBTkEsR0FBTSxHQUFNO1FBRVpDLE1BQU0sQ0FDSixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQURJLEVBRUosQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FGSSxFQUdKLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBSEksRUFJSixDQUFDLENBQUQsRUFBSSxHQUFKLEVBQVMsTUFBVCxDQUpJLENBRFY7UUFPSTFCLE9BQU9FLEVBQUUsaURBQUYsQ0FQWDtRQVFJeUIsUUFBUXpCLEVBQUUsd0NBQUYsQ0FSWjs7U0FVSyxJQUFJMEIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixJQUFJTixNQUF4QixFQUFnQ1EsR0FBaEMsRUFBcUM7VUFDL0JDLE1BQU0zQixFQUFFLFdBQUYsQ0FBVjtXQUNLLElBQUk0QixJQUFJLENBQWIsRUFBZ0JBLElBQUlKLElBQUlFLENBQUosRUFBT1IsTUFBM0IsRUFBbUNVLEdBQW5DLEVBQXdDO1lBQ2xDaEIsTUFBTVksSUFBSUUsQ0FBSixFQUFPRSxDQUFQLENBQVY7WUFDSUMsS0FBSzdCLEVBQUUsOEJBQThCWSxHQUE5QixHQUFvQyxPQUF0QyxDQURUO2dCQUVRLE1BQVIsR0FBaUJpQixHQUFHQyxFQUFILENBQU03QixLQUFOLEVBQWFhLEtBQWIsQ0FBakIsR0FBdUNlLEdBQUdDLEVBQUgsQ0FBTTdCLEtBQU4sRUFBYSxFQUFDVyxRQUFELEVBQWIsRUFBb0JGLEdBQXBCLENBQXZDO1lBQ0lTLE1BQUosQ0FBV1UsRUFBWDs7WUFFSVYsTUFBTixDQUFhUSxHQUFiOztTQUVHUixNQUFMLENBQVlNLEtBQVo7TUFDRSxNQUFGLEVBQVVOLE1BQVYsQ0FBaUJyQixJQUFqQjs7VUFFTUEsSUFBTixDQUFXLEVBQVg7VUFDTXFCLE1BQU4sQ0FBYSx1Q0FBYjtVQUNNQSxNQUFOLENBQWEsb0NBQW9DdEIsSUFBcEMsR0FBMkMsU0FBeEQ7R0ExQkY7Ozs7UUErQk1pQyxFQUFOLENBQVM3QixLQUFULEVBQWdCSyxLQUFoQjtJQUNFeUIsUUFBRixFQUFZRCxFQUFaLENBQWU3QixLQUFmLEVBQXNCLFlBQU07O01BRXhCLGNBQUYsRUFBa0JRLElBQWxCO0tBQ0NWLE9BQU9RLEtBQVIsSUFBaUJQLEVBQUUsbUJBQUYsRUFBdUJRLElBQXZCLEVBQWpCO0dBSEY7O1NBTU8sSUFBUDs7O0FDN0VGUixFQUFFLFlBQVk7SUFDVmdDLEVBQUYsQ0FBS0MsTUFBTCxDQUFZLEVBQUVDLGtCQUFGLEVBQVo7O0VBRUlDLEFBQUosQUFBMkI7WUFDakJDLEdBQVIsT0FBZ0JELGFBQWhCOztDQUpKOzsifQ==
