(function () {
'use strict';

var keyboard = function (numInput) {
  var _this = this,
      _tip = this.html(),
      _input = $(numInput)[0],
      touch = 'touchend click';

  var dep = function dep(e) {
    e.preventDefault();
    e.stopPropagation();
  };

  var _init = function _init(e) {
    dep(e);
    createFlash(_input.value);
    $('.keyboard-hk').show();
    $('.keyboard-txt-hod').hide();
  };

  var add = function add(e) {
    dep(e);
    _input.value += e.data.txt;
    !/^\d+\.?\d{0,2}$/.test(_input.value) && minus(e);
    createFlash(_input.value);
  };

  var minus = function minus(e) {
    dep(e);
    _input.value && (_input.value = _input.value.replace(/.$/, ''));
    createFlash(_input.value);
  };

  var createFlash = function createFlash(val) {
    $('.keyboard-txt-hk').html(val || '');
    !$('.keyboard-flash').length && _this.append('<span class="keyboard-flash">|</span>');
    _this.trigger('kbtap', val);
  };

  var removeFlash = function removeFlash() {
    return $('.keyboard-flash').remove();
  };

  var dom = function dom() {
    var key = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, '.', 'back']],
        html = $('<div class="keyboard keyboard-hk" hidden></div>'),
        table = $('<table class="keyboard-table"></table>');

    for (var i = 0; i < key.length; i++) {
      var row = $('<tr></tr>');
      for (var j = 0; j < key[i].length; j++) {
        var txt = key[i][j],
            td = $('<td class="keyboard-key">' + txt + '</td>');
        txt === 'back' ? td.on(touch, minus) : td.on(touch, { txt: txt }, add);
        row.append(td);
      }
      table.append(row);
    }
    html.append(table);
    $('body').append(html);

    _this.html('');
    _this.append('<span class="keyboard-txt-hk"></span>');
    _this.append('<span class="keyboard-txt-hod">' + _tip + '</span>');
  };

  dom();

  _this.on(touch, _init);
  $(document).on(touch, function () {
    removeFlash();
    $('.keyboard-hk').hide();
    !_input.value && $('.keyboard-txt-hod').show();
  });

  return this;
};

$(function () {
  $.extend($.fn, { keyboard: keyboard });

  {
    console.log('[' + "development" + '] satarted!');
  }
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9rZXlib2FyZC5qcyIsIi4uL3NyYy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKG51bUlucHV0KSB7XHJcbiAgY29uc3RcclxuICAgICAgX3RoaXMgPSB0aGlzLFxyXG4gICAgICBfdGlwID0gdGhpcy5odG1sKCksXHJcbiAgICAgIF9pbnB1dCA9ICQobnVtSW5wdXQpWzBdLFxyXG4gICAgICB0b3VjaCA9ICd0b3VjaGVuZCBjbGljaydcclxuXHJcbiAgY29uc3QgZGVwID0gKGUpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgX2luaXQgPSAoZSkgPT4ge1xyXG4gICAgZGVwKGUpXHJcbiAgICBjcmVhdGVGbGFzaChfaW5wdXQudmFsdWUpXHJcbiAgICAkKCcua2V5Ym9hcmQtaGsnKS5zaG93KClcclxuICAgICQoJy5rZXlib2FyZC10eHQtaG9kJykuaGlkZSgpXHJcbiAgfVxyXG5cclxuICBjb25zdCBhZGQgPSAoZSkgPT4ge1xyXG4gICAgZGVwKGUpXHJcbiAgICBfaW5wdXQudmFsdWUgKz0gZS5kYXRhLnR4dFxyXG4gICAgIS9eXFxkK1xcLj9cXGR7MCwyfSQvLnRlc3QoX2lucHV0LnZhbHVlKSAmJiBtaW51cyhlKVxyXG4gICAgY3JlYXRlRmxhc2goX2lucHV0LnZhbHVlKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgbWludXMgPSAoZSkgPT4ge1xyXG4gICAgZGVwKGUpXHJcbiAgICBfaW5wdXQudmFsdWUgJiYgKF9pbnB1dC52YWx1ZSA9IF9pbnB1dC52YWx1ZS5yZXBsYWNlKC8uJC8sICcnKSlcclxuICAgIGNyZWF0ZUZsYXNoKF9pbnB1dC52YWx1ZSlcclxuICB9XHJcblxyXG4gIGNvbnN0IGNyZWF0ZUZsYXNoID0gKHZhbCkgPT4ge1xyXG4gICAgJCgnLmtleWJvYXJkLXR4dC1oaycpLmh0bWwodmFsIHx8ICcnKVxyXG4gICAgISQoJy5rZXlib2FyZC1mbGFzaCcpLmxlbmd0aCAmJiBfdGhpcy5hcHBlbmQoJzxzcGFuIGNsYXNzPVwia2V5Ym9hcmQtZmxhc2hcIj58PC9zcGFuPicpXHJcbiAgICBfdGhpcy50cmlnZ2VyKCdrYnRhcCcsIHZhbClcclxuICB9XHJcblxyXG4gIGNvbnN0IHJlbW92ZUZsYXNoID0gKCkgPT4gJCgnLmtleWJvYXJkLWZsYXNoJykucmVtb3ZlKCk7XHJcblxyXG4gIGNvbnN0IGRvbSA9ICgpID0+IHtcclxuICAgIGNvbnN0XHJcbiAgICAgICAga2V5ID0gW1xyXG4gICAgICAgICAgWzEsIDIsIDNdLFxyXG4gICAgICAgICAgWzQsIDUsIDZdLFxyXG4gICAgICAgICAgWzcsIDgsIDldLFxyXG4gICAgICAgICAgWzAsICcuJywgJ2JhY2snXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgaHRtbCA9ICQoJzxkaXYgY2xhc3M9XCJrZXlib2FyZCBrZXlib2FyZC1oa1wiIGhpZGRlbj48L2Rpdj4nKSxcclxuICAgICAgICB0YWJsZSA9ICQoJzx0YWJsZSBjbGFzcz1cImtleWJvYXJkLXRhYmxlXCI+PC90YWJsZT4nKVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGxldCByb3cgPSAkKCc8dHI+PC90cj4nKVxyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGtleVtpXS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIGxldCB0eHQgPSBrZXlbaV1bal0sXHJcbiAgICAgICAgICAgIHRkID0gJCgnPHRkIGNsYXNzPVwia2V5Ym9hcmQta2V5XCI+JyArIHR4dCArICc8L3RkPicpXHJcbiAgICAgICAgdHh0ID09PSAnYmFjaycgPyB0ZC5vbih0b3VjaCwgbWludXMpIDogdGQub24odG91Y2gsIHt0eHR9LCBhZGQpXHJcbiAgICAgICAgcm93LmFwcGVuZCh0ZClcclxuICAgICAgfVxyXG4gICAgICB0YWJsZS5hcHBlbmQocm93KVxyXG4gICAgfVxyXG4gICAgaHRtbC5hcHBlbmQodGFibGUpXHJcbiAgICAkKCdib2R5JykuYXBwZW5kKGh0bWwpXHJcblxyXG4gICAgX3RoaXMuaHRtbCgnJylcclxuICAgIF90aGlzLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJrZXlib2FyZC10eHQtaGtcIj48L3NwYW4+JylcclxuICAgIF90aGlzLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJrZXlib2FyZC10eHQtaG9kXCI+JyArIF90aXAgKyAnPC9zcGFuPicpXHJcbiAgfVxyXG5cclxuICBkb20oKTtcclxuXHJcbiAgX3RoaXMub24odG91Y2gsIF9pbml0KVxyXG4gICQoZG9jdW1lbnQpLm9uKHRvdWNoLCAoKSA9PiB7XHJcbiAgICByZW1vdmVGbGFzaCgpXHJcbiAgICAkKCcua2V5Ym9hcmQtaGsnKS5oaWRlKClcclxuICAgICFfaW5wdXQudmFsdWUgJiYgJCgnLmtleWJvYXJkLXR4dC1ob2QnKS5zaG93KClcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07IiwiaW1wb3J0IGtleWJvYXJkIGZyb20gJy4va2V5Ym9hcmQnXHJcblxyXG4kKGZ1bmN0aW9uICgpIHtcclxuICAkLmV4dGVuZCgkLmZuLCB7IGtleWJvYXJkIH0pXHJcbiAgXHJcbiAgaWYgKEVOViA9PT0gJ2RldmVsb3BtZW50Jykge1xyXG4gICAgY29uc29sZS5sb2coYFske0VOVn1dIHNhdGFydGVkIWApXHJcbiAgfVxyXG59KSJdLCJuYW1lcyI6WyJudW1JbnB1dCIsIl90aGlzIiwiX3RpcCIsImh0bWwiLCJfaW5wdXQiLCIkIiwidG91Y2giLCJkZXAiLCJlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJfaW5pdCIsInZhbHVlIiwic2hvdyIsImhpZGUiLCJhZGQiLCJkYXRhIiwidHh0IiwidGVzdCIsIm1pbnVzIiwicmVwbGFjZSIsImNyZWF0ZUZsYXNoIiwidmFsIiwibGVuZ3RoIiwiYXBwZW5kIiwidHJpZ2dlciIsInJlbW92ZUZsYXNoIiwicmVtb3ZlIiwiZG9tIiwia2V5IiwidGFibGUiLCJpIiwicm93IiwiaiIsInRkIiwib24iLCJkb2N1bWVudCIsImV4dGVuZCIsImZuIiwia2V5Ym9hcmQiLCJFTlYiLCJsb2ciXSwibWFwcGluZ3MiOiI7OztBQUNBLGVBQWUsVUFBVUEsUUFBVixFQUFvQjtNQUU3QkMsUUFBUSxJQURaO01BRUlDLE9BQU8sS0FBS0MsSUFBTCxFQUZYO01BR0lDLFNBQVNDLEVBQUVMLFFBQUYsRUFBWSxDQUFaLENBSGI7TUFJSU0sUUFBUSxnQkFKWjs7TUFNTUMsTUFBTSxTQUFOQSxHQUFNLENBQUNDLENBQUQsRUFBTztNQUNmQyxjQUFGO01BQ0VDLGVBQUY7R0FGRjs7TUFLTUMsUUFBUSxTQUFSQSxLQUFRLENBQUNILENBQUQsRUFBTztRQUNmQSxDQUFKO2dCQUNZSixPQUFPUSxLQUFuQjtNQUNFLGNBQUYsRUFBa0JDLElBQWxCO01BQ0UsbUJBQUYsRUFBdUJDLElBQXZCO0dBSkY7O01BT01DLE1BQU0sU0FBTkEsR0FBTSxDQUFDUCxDQUFELEVBQU87UUFDYkEsQ0FBSjtXQUNPSSxLQUFQLElBQWdCSixFQUFFUSxJQUFGLENBQU9DLEdBQXZCO0tBQ0Msa0JBQWtCQyxJQUFsQixDQUF1QmQsT0FBT1EsS0FBOUIsQ0FBRCxJQUF5Q08sTUFBTVgsQ0FBTixDQUF6QztnQkFDWUosT0FBT1EsS0FBbkI7R0FKRjs7TUFPTU8sUUFBUSxTQUFSQSxLQUFRLENBQUNYLENBQUQsRUFBTztRQUNmQSxDQUFKO1dBQ09JLEtBQVAsS0FBaUJSLE9BQU9RLEtBQVAsR0FBZVIsT0FBT1EsS0FBUCxDQUFhUSxPQUFiLENBQXFCLElBQXJCLEVBQTJCLEVBQTNCLENBQWhDO2dCQUNZaEIsT0FBT1EsS0FBbkI7R0FIRjs7TUFNTVMsY0FBYyxTQUFkQSxXQUFjLENBQUNDLEdBQUQsRUFBUztNQUN6QixrQkFBRixFQUFzQm5CLElBQXRCLENBQTJCbUIsT0FBTyxFQUFsQztLQUNDakIsRUFBRSxpQkFBRixFQUFxQmtCLE1BQXRCLElBQWdDdEIsTUFBTXVCLE1BQU4sQ0FBYSx1Q0FBYixDQUFoQztVQUNNQyxPQUFOLENBQWMsT0FBZCxFQUF1QkgsR0FBdkI7R0FIRjs7TUFNTUksY0FBYyxTQUFkQSxXQUFjO1dBQU1yQixFQUFFLGlCQUFGLEVBQXFCc0IsTUFBckIsRUFBTjtHQUFwQjs7TUFFTUMsTUFBTSxTQUFOQSxHQUFNLEdBQU07UUFFWkMsTUFBTSxDQUNKLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBREksRUFFSixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUZJLEVBR0osQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FISSxFQUlKLENBQUMsQ0FBRCxFQUFJLEdBQUosRUFBUyxNQUFULENBSkksQ0FEVjtRQU9JMUIsT0FBT0UsRUFBRSxpREFBRixDQVBYO1FBUUl5QixRQUFRekIsRUFBRSx3Q0FBRixDQVJaOztTQVVLLElBQUkwQixJQUFJLENBQWIsRUFBZ0JBLElBQUlGLElBQUlOLE1BQXhCLEVBQWdDUSxHQUFoQyxFQUFxQztVQUMvQkMsTUFBTTNCLEVBQUUsV0FBRixDQUFWO1dBQ0ssSUFBSTRCLElBQUksQ0FBYixFQUFnQkEsSUFBSUosSUFBSUUsQ0FBSixFQUFPUixNQUEzQixFQUFtQ1UsR0FBbkMsRUFBd0M7WUFDbENoQixNQUFNWSxJQUFJRSxDQUFKLEVBQU9FLENBQVAsQ0FBVjtZQUNJQyxLQUFLN0IsRUFBRSw4QkFBOEJZLEdBQTlCLEdBQW9DLE9BQXRDLENBRFQ7Z0JBRVEsTUFBUixHQUFpQmlCLEdBQUdDLEVBQUgsQ0FBTTdCLEtBQU4sRUFBYWEsS0FBYixDQUFqQixHQUF1Q2UsR0FBR0MsRUFBSCxDQUFNN0IsS0FBTixFQUFhLEVBQUNXLFFBQUQsRUFBYixFQUFvQkYsR0FBcEIsQ0FBdkM7WUFDSVMsTUFBSixDQUFXVSxFQUFYOztZQUVJVixNQUFOLENBQWFRLEdBQWI7O1NBRUdSLE1BQUwsQ0FBWU0sS0FBWjtNQUNFLE1BQUYsRUFBVU4sTUFBVixDQUFpQnJCLElBQWpCOztVQUVNQSxJQUFOLENBQVcsRUFBWDtVQUNNcUIsTUFBTixDQUFhLHVDQUFiO1VBQ01BLE1BQU4sQ0FBYSxvQ0FBb0N0QixJQUFwQyxHQUEyQyxTQUF4RDtHQTFCRjs7OztRQStCTWlDLEVBQU4sQ0FBUzdCLEtBQVQsRUFBZ0JLLEtBQWhCO0lBQ0V5QixRQUFGLEVBQVlELEVBQVosQ0FBZTdCLEtBQWYsRUFBc0IsWUFBTTs7TUFFeEIsY0FBRixFQUFrQlEsSUFBbEI7S0FDQ1YsT0FBT1EsS0FBUixJQUFpQlAsRUFBRSxtQkFBRixFQUF1QlEsSUFBdkIsRUFBakI7R0FIRjs7U0FNTyxJQUFQOzs7QUM3RUZSLEVBQUUsWUFBWTtJQUNWZ0MsTUFBRixDQUFTaEMsRUFBRWlDLEVBQVgsRUFBZSxFQUFFQyxrQkFBRixFQUFmOztFQUVJQyxBQUFKLEFBQTJCO1lBQ2pCQyxHQUFSLE9BQWdCRCxhQUFoQjs7Q0FKSjs7In0=
